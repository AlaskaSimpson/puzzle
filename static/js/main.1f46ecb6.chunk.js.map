{"version":3,"sources":["index.js"],"names":["Tile","props","tilevalue","value","className","onClick","Board","state","tiles","shuffle","numbermoves","maxmoves","correct","i","this","alert","setState","indexOf","moves","emptytile","getemptytile","validmoves","move","push","tile1","tile2","values","slice","tile1value","getnumbercorrect","gamestate","complete","correcttiles","length","gameWon","movesRemaing","IsTileValid","getmoves","includes","movenumber","swaptiles","position","handleClick","lefttilenumber","renderTile","completed","movesmade","movesleft","maxmovesallowed","gameover","renderRow","NewGame","setdifficulty","React","Component","Game","tilescorrect","isSolvable","positions","sort","Math","random","emptytilerow","numberofinversions","emptytileindex","justnumbers","filter","item","number","inversions","element","list","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f46ecb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Tile(props) {\r\n      const tilevalue = \"tile tilenumber\" + props.value\r\n      return (\r\n        <button \r\n        className={tilevalue} onClick={props.onClick}>\r\n        </button>\r\n      );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tiles: shuffle([null, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),\r\n            numbermoves: 0,\r\n            maxmoves: 300,\r\n            correct: 0\r\n        };\r\n    }\r\n\r\n    setdifficulty(i){\r\n        if (this.state.numbermoves >0){\r\n            alert('Start a New Game to Change Difficulty')\r\n        } else if (i === 0){\r\n            this.setState({maxmoves: 100})\r\n        } else if (i === 1){\r\n            this.setState({maxmoves: 200})\r\n        } else {\r\n            this.setState({maxmoves: 300})\r\n        }\r\n    }\r\n\r\n    getemptytile(){\r\n        var emptytile = this.state.tiles.indexOf(null)\r\n        return emptytile\r\n    }\r\n\r\n    getmoves(){\r\n       var emptytile = this.getemptytile()\r\n       var validmoves = []\r\n       var moves\r\n        if(emptytile%4 === 0){\r\n            moves = [(emptytile+1), (emptytile-4), (emptytile+4)]\r\n        } else if (emptytile%4 ===3){\r\n            moves = [(emptytile-1), (emptytile-4), (emptytile+4)]\r\n        } else {\r\n            moves = [(emptytile-1), (emptytile+1), (emptytile-4), (emptytile+4)]\r\n        }\r\n        \r\n        for (let move of moves) {\r\n            if (move >= 0 && move <= 15){\r\n                validmoves.push(move)\r\n            }           \r\n        }\r\n       return validmoves\r\n    }\r\n\r\n    swaptiles(tile1, tile2){\r\n      var values = this.state.tiles.slice();\r\n      var tile1value = values[tile1]\r\n      values[tile1] = values[tile2]\r\n      values[tile2] = tile1value    \r\n      \r\n      this.setState({\r\n          tiles : values, \r\n          correct: this.getnumbercorrect(values)\r\n        })  \r\n    }\r\n\r\n    getnumbercorrect(gamestate){\r\n      const complete =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null];\r\n      var correcttiles = []\r\n      for (let i=0; i < complete.length; i++){\r\n        if(gamestate[i] === complete[i]){\r\n          correcttiles.push(correcttiles[i])\r\n        }\r\n      }\r\n      return correcttiles.length\r\n    }\r\n\r\n    handleClick(i){   \r\n      if (gameWon(this.state.correct) || !(movesRemaing(this.state.numbermoves, this.state.maxmoves))){\r\n        return;\r\n      }\r\n      var moves = this.getmoves()\r\n      var IsTileValid = moves.includes(i)\r\n      var movenumber = this.state.numbermoves + 1\r\n      if (IsTileValid){\r\n        this.setState({\r\n          numbermoves: movenumber\r\n        })\r\n        this.swaptiles(i,this.getemptytile())\r\n      } \r\n    }\r\n\r\n    renderTile(i) {\r\n      const positions = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\n      return <Tile \r\n      value={this.state.tiles[i]}\r\n      position = {positions[i]}\r\n      onClick={() => this.handleClick(i)}\r\n      />;\r\n    }\r\n\r\n    renderRow(i){\r\n        var lefttilenumber = i*4;\r\n        return(\r\n        <div className=\"board-row\">\r\n        {this.renderTile(lefttilenumber)}\r\n        {this.renderTile(lefttilenumber+1)}\r\n        {this.renderTile(lefttilenumber+2)}\r\n        {this.renderTile(lefttilenumber+3)}\r\n        </div>\r\n        )\r\n    }\r\n\r\n    NewGame(){\r\n        this.setState(\r\n            {tiles: shuffle([null, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),\r\n            numbermoves: 0,\r\n            correct: 0\r\n            })\r\n    }\r\n  \r\n    render() {\r\n      let completed;\r\n      let movesmade;\r\n      let movesleft;\r\n      let maxmovesallowed;\r\n      let gameover = false;\r\n      if (gameWon(this.state.correct)){\r\n        completed = \"GAME WON: in \" + this.state.numbermoves + \" moves\";\r\n        movesleft = null;\r\n        maxmovesallowed = null;\r\n        gameover = true;\r\n      } else if(!(movesRemaing(this.state.numbermoves, this.state.maxmoves))){\r\n        completed = \"GAME OVER: no more moves\";\r\n        gameover=true;\r\n      } else{\r\n        completed = \"Number of Tiles Correct: \" + this.state.correct;\r\n        movesmade = \"Moves Made: \" + this.state.numbermoves;\r\n      }\r\n\r\n      if ((this.state.maxmoves-this.state.numbermoves) < 30 && !gameover){\r\n          maxmovesallowed = null;\r\n          movesleft = \"Moves Remaining: \" + (this.state.maxmoves-this.state.numbermoves);\r\n      } else if (!gameover){\r\n          movesleft = null;\r\n          maxmovesallowed = \"Maximum Moves: \" + this.state.maxmoves;\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"status\">{completed}</div>\r\n          <div className=\"status\">{movesmade}</div>\r\n          <div className=\"status\">{maxmovesallowed}</div>\r\n          <div className=\"status low-moves\">{movesleft}</div>\r\n          <div className = \"board\">\r\n            {this.renderRow(0)}\r\n            {this.renderRow(1)}\r\n            {this.renderRow(2)}\r\n            {this.renderRow(3)}\r\n          </div>\r\n          <div className = \"options\">\r\n          <button className=\"new-game\" onClick={()=> this.NewGame()}>New Game</button><br></br>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(2)}>Easy</button>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(1)}>Medium</button>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(0)}>Hard</button>\r\n          </div>\r\n        </div>\r\n      ); \r\n    }\r\n  }\r\n\r\n  class Game extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board />\r\n            </div>\r\n            </div>\r\n            );\r\n        }\r\n  }\r\n  \r\n  function gameWon(tilescorrect){\r\n    if (tilescorrect === 16){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function movesRemaing(movesmade, maxmoves){\r\n      if (movesmade <= maxmoves){\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }\r\n  }\r\n\r\n  function shuffle(){\r\n    var isSolvable = false;\r\n    while(isSolvable === false){\r\n        var positions = [null, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15].sort(() => Math.random() -0.5)\r\n        var emptytilerow = 0\r\n        var numberofinversions = 0\r\n\r\n        var emptytileindex = positions.indexOf(null)\r\n        while (emptytileindex >= 0){\r\n            emptytilerow = emptytilerow + 1\r\n            emptytileindex = emptytileindex -4\r\n        }\r\n\r\n        var justnumbers = positions.filter(item => item !== null)\r\n        let number\r\n        for (number in justnumbers){\r\n            numberofinversions = numberofinversions + inversions(number,justnumbers)\r\n        }\r\n\r\n        if ((numberofinversions + emptytilerow) % 2 === 0){\r\n            isSolvable = true\r\n        }\r\n    }\r\n    return positions\r\n  }\r\n\r\n  function inversions(element,list){\r\n      var elementindex = list.indexOf(element)\r\n      var inversions = 0\r\n      let index\r\n      for (index=(elementindex+1); index < list.length; index++){\r\n        if (element > list[index]){\r\n            inversions = inversions + 1\r\n        }\r\n      }\r\n      return inversions\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}