{"version":3,"sources":["index.js"],"names":["Tile","props","tilevalue","value","className","onClick","Board","state","tiles","shuffletiles","numbermoves","maxmoves","correct","i","this","alert","setState","indexOf","tile1","tile2","values","slice","tile1value","getnumbercorrect","gamestate","complete","correcttiles","length","push","gameWon","movesRemaing","IsTileValid","getmoves","getemptytile","includes","movenumber","swaptiles","position","handleClick","lefttilenumber","renderTile","completed","movesmade","movesleft","maxmovesallowed","gameover","renderRow","NewGame","setdifficulty","React","Component","Game","tilescorrect","emptytile","moves","validmoves","move","positions","possiblemoves","emptytileindex","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0caced05.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Tile(props) {\r\n      const tilevalue = \"tile tilenumber\" + props.value\r\n      return (\r\n        <button \r\n        className={tilevalue} onClick={props.onClick}>\r\n        </button>\r\n      );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tiles: shuffletiles(),\r\n            numbermoves: 0,\r\n            maxmoves: 300,\r\n            correct: 0\r\n        };\r\n    }\r\n\r\n    setdifficulty(i){\r\n        if (this.state.numbermoves >0){\r\n            alert('Start a New Game to Change Difficulty')\r\n        } else if (i === 0){\r\n            this.setState({maxmoves: 100})\r\n        } else if (i === 1){\r\n            this.setState({maxmoves: 200})\r\n        } else {\r\n            this.setState({maxmoves: 300})\r\n        }\r\n    }\r\n\r\n    getemptytile(){\r\n        var emptytile = this.state.tiles.indexOf(null)\r\n        return emptytile\r\n    }\r\n\r\n    swaptiles(tile1, tile2){\r\n      var values = this.state.tiles.slice();\r\n      var tile1value = values[tile1]\r\n      values[tile1] = values[tile2]\r\n      values[tile2] = tile1value    \r\n      \r\n      this.setState({\r\n          tiles : values, \r\n          correct: this.getnumbercorrect(values)\r\n        })  \r\n    }\r\n\r\n    getnumbercorrect(gamestate){\r\n      const complete =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null];\r\n      var correcttiles = []\r\n      for (let i=0; i < complete.length; i++){\r\n        if(gamestate[i] === complete[i]){\r\n          correcttiles.push(correcttiles[i])\r\n        }\r\n      }\r\n      return correcttiles.length\r\n    }\r\n\r\n    handleClick(i){   \r\n      if (gameWon(this.state.correct) || !(movesRemaing(this.state.numbermoves, this.state.maxmoves))){\r\n        return;\r\n      }\r\n      var moves = getmoves(this.getemptytile())\r\n      var IsTileValid = moves.includes(i)\r\n      var movenumber = this.state.numbermoves + 1\r\n      if (IsTileValid){\r\n        this.setState({\r\n          numbermoves: movenumber\r\n        })\r\n        this.swaptiles(i,this.getemptytile())\r\n      } \r\n    }\r\n\r\n    renderTile(i) {\r\n      const positions = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\n      return <Tile \r\n      value={this.state.tiles[i]}\r\n      position = {positions[i]}\r\n      onClick={() => this.handleClick(i)}\r\n      />;\r\n    }\r\n\r\n    renderRow(i){\r\n        var lefttilenumber = i*4;\r\n        return(\r\n        <div className=\"board-row\">\r\n        {this.renderTile(lefttilenumber)}\r\n        {this.renderTile(lefttilenumber+1)}\r\n        {this.renderTile(lefttilenumber+2)}\r\n        {this.renderTile(lefttilenumber+3)}\r\n        </div>\r\n        )\r\n    }\r\n\r\n    NewGame(){\r\n        this.setState(\r\n            {tiles: shuffletiles(),\r\n            numbermoves: 0,\r\n            correct: 0\r\n            })\r\n    }\r\n  \r\n    render() {\r\n      let completed;\r\n      let movesmade;\r\n      let movesleft;\r\n      let maxmovesallowed;\r\n      let gameover = false;\r\n      if (gameWon(this.state.correct)){\r\n        completed = \"GAME WON: in \" + this.state.numbermoves + \" moves\";\r\n        movesleft = null;\r\n        maxmovesallowed = null;\r\n        gameover = true;\r\n      } else if(!(movesRemaing(this.state.numbermoves, this.state.maxmoves))){\r\n        completed = \"GAME OVER: no more moves\";\r\n        gameover=true;\r\n      } else{\r\n        completed = \"Number of Tiles Correct: \" + this.state.correct;\r\n        movesmade = \"Moves Made: \" + this.state.numbermoves;\r\n      }\r\n\r\n      if ((this.state.maxmoves-this.state.numbermoves) < 30 && !gameover){\r\n          maxmovesallowed = null;\r\n          movesleft = \"Moves Remaining: \" + (this.state.maxmoves-this.state.numbermoves);\r\n      } else if (!gameover){\r\n          movesleft = null;\r\n          maxmovesallowed = \"Maximum Moves: \" + this.state.maxmoves;\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"status\">{completed}</div>\r\n          <div className=\"status\">{movesmade}</div>\r\n          <div className=\"status\">{maxmovesallowed}</div>\r\n          <div className=\"status low-moves\">{movesleft}</div>\r\n          <div className = \"board\">\r\n            {this.renderRow(0)}\r\n            {this.renderRow(1)}\r\n            {this.renderRow(2)}\r\n            {this.renderRow(3)}\r\n          </div>\r\n          <div className = \"options\">\r\n          <button className=\"new-game\" onClick={()=> this.NewGame()}>New Game</button><br></br>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(2)}>Easy</button>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(1)}>Medium</button>\r\n          <button className=\"setting\" onClick={()=> this.setdifficulty(0)}>Hard</button>\r\n          </div>\r\n        </div>\r\n      ); \r\n    }\r\n  }\r\n\r\n  class Game extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n          <body>\r\n            <div className = \"game-title\">\r\n            <h1>15 Tile Puzzle</h1>\r\n            </div>\r\n            <div className=\"game\">\r\n            <div className=\"column game-info\">\r\n              <div className = \"info-box\">\r\n              <h2>How to Play</h2>\r\n              <p> The aim of the game is to rearrange the tiles into numerical order, with the empty space on the bottom right</p>\r\n              <p> Click on a tile to move it. It is only possible to move tiles that are next to the empty space</p>\r\n              <p> Too easy? Select a difficulty to reduce the number of moves you have to solve the puzzle</p>\r\n              <p> Use the New Game button, to get a freshly shuffled board</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"column game-board\">\r\n            <Board />\r\n            </div>\r\n            </div>\r\n          </body>\r\n            );\r\n        }\r\n  }\r\n  \r\n  function gameWon(tilescorrect){\r\n    if (tilescorrect === 16){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function movesRemaing(movesmade, maxmoves){\r\n      if (movesmade <= maxmoves){\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }\r\n  }\r\n\r\n\r\n\r\nfunction getmoves(emptytile){\r\n  var validmoves = []\r\n  var moves\r\n  if(emptytile%4 === 0){\r\n    moves = [(emptytile+1), (emptytile-4), (emptytile+4)]\r\n  } else if (emptytile%4 ===3){\r\n    moves = [(emptytile-1), (emptytile-4), (emptytile+4)]\r\n  } else {\r\n    moves = [(emptytile-1), (emptytile+1), (emptytile-4), (emptytile+4)]\r\n  }\r\n     \r\n  for (let move of moves) {\r\n    if (move >= 0 && move <= 15){\r\n      validmoves.push(move)\r\n    }           \r\n    }\r\n  return validmoves\r\n }\r\n\r\nfunction shuffletiles(){\r\n  var positions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null];\r\n\r\n  let i\r\n  for (i=0; i < 500; i++){\r\n    var possiblemoves =[];\r\n    var emptytileindex = positions.indexOf(null);\r\n    possiblemoves= getmoves(emptytileindex);\r\n    let move = possiblemoves[Math.floor(Math.random() * possiblemoves.length)];\r\n    var tilevalue = positions[move];\r\n    positions[move] = null;\r\n    positions[emptytileindex] = tilevalue;\r\n  }\r\n  return positions;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}